#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage[use-david]{culmus}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Anti-Disassembly - how malware obfuscates its code
\end_layout

\begin_layout Date
July 19, 2021
\end_layout

\begin_layout Standard
Disassemblers are one of the most useful tools when reverse-engineering
 software.
 We trust them blindly, but there are many ways they can be deceived.
 I wrote this article after reading the anti-disassembly chapter in 
\begin_inset Quotes eld
\end_inset


\shape italic
Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software
\begin_inset Quotes erd
\end_inset


\shape default
, which is a great book and you should totally read it.
\end_layout

\begin_layout Section*
How do disassemblers work?
\end_layout

\begin_layout Subsection*
Linear Disassemblers
\end_layout

\begin_layout Standard
A linear disassembler is simple - it reads an instruction according to the
 instruction set architecture (which is easy, it's an operation code and
 some well-defined operands), checks the size of the instruction and just
 reads the next one.
 This is intuitive - however, it doesn't really work in this complicated
 world.
 Often times, we have jump tables (which are used to optimise switches and
 contain addresses for every possible value), or other data, which is in
 the same place as instructions.
 So a disassembler can't just assume the next few bytes are going to be
 instructions.
\end_layout

\begin_layout Standard
This is where flow-oriented disassemblers come in...
\end_layout

\begin_layout Subsection*
Flow-oriented disassemblers
\end_layout

\begin_layout Standard
Flow-oriented disassembly is what dedicated products such as IDA Pro or
 Ghidra use.
 To disassemble well, we need to know which offsets instructions are at.
 To do so, we can just look at the jumps - every address mentioned is now
 marked as an address where assembly starts.
 This way, when we attempt to disassemble something that isn't assembly,
 and it overlaps with a place we now is vaild, we will disassemble from
 there and mark the previous bytes as unknown data.
 In normal, everyday assembly we now shouldn't get destroyed by the occasional
 non-code byte.
\end_layout

\begin_layout Standard
This is great! However, we have made some big assumptions.
\end_layout

\begin_layout Standard
Who said a single byte doesn't belong in two instructions?
\end_layout

\begin_layout Section*
Breaking the disassemblers
\end_layout

\begin_layout Standard
Let's look at the following example:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JMP -1
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEC EAX
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INC EAX
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The processor reads it as jumping back to the address where FF is, then
 incrementing and decreasing EAX.
 This is useless and can be inserted pretty much anywhere like a NOP is.
 A disassembler will obviously get confused - linearly, it doesn't make
 sense (C0 48 is some sort of ROR instruction), and flow-based, the 0 offset
 is legal, and the 1 offset is legal too, but they are overlapping, so RIP
 disassembler.
\end_layout

\begin_layout Standard
The only way to mitigate this kind of anti-disassembly is to look for all
 of these sequences and convert them to something that is understandable
 - in this case, just convert it to a NOP.
\end_layout

\begin_layout Standard
There are many other examples - we can XOR EAX, EAX, then JZ to some legal
 instruction, and leave a rogue byte to ruin the disassembly.
 JZ means that both the position after the jump and the next instruction
 are legal, again confusing the disassembler.
 These must be taken care of manually.
 Solving such problems is hard - they can obviously be made far more complicated
 and even contain some real logic.
\end_layout

\begin_layout Standard
Additionaly, using the same XOR EAX, EAX then JZ technique (or something
 else that is definitely true), we can add a JMP that never happens, and
 mark any other place as code.
\end_layout

\begin_layout Section*
Higher-level ways to make life difficult for analysers
\end_layout

\begin_layout Standard
Compiled code usually follows very simple patterns - functions are called
 with CALL which pushes the instruction pointer then jumps, and functions
 start with push EBP and end with a pop EBP and a RET (which does the opposite
 of CALL - pop into the old instruction pointer).
 This makes life easy for us, but it's not rigid.
 Nothing prevents you from pushing a pointer then doing a RET.
 In static analysis, a disassembler doesn't know this is functionally equivalent
 to jumping.
 You could even obfuscate it further by doing arithmetic on an address which
 is relative to EBP, but actually ends up being the address of ESP, which
 takes a lot of time to understand as an analyser.
\end_layout

\end_body
\end_document
